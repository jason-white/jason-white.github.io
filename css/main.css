@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,700,800);
html {
  font-size: 100%;
  line-height: 1.4;
  box-sizing: border-box; }
  @media all and (min-width: 600px) {
    html {
      font-size: 100%; } }
  @media all and (min-width: 900px) {
    html {
      font-size: 112.5%; } }
  @media all and (min-width: 1200px) {
    html {
      font-size: 125%; } }

body {
  font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-weight: 300;
  background-color: #BDC3C7;
  color: #eee; }

*, *:before, *:after {
  box-sizing: inherit;
  margin: 0;
  padding: 0; }

.rapper {
  max-width: 75em;
  margin-left: 0;
  margin-right: auto; }
  .rapper:after {
    content: " ";
    display: block;
    clear: both; }

aside {
  width: 350px;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  font-size: 1rem;
  color: #16A085;
  padding: 0 1.5em;
  background-color: #111; }
  aside h1 {
    text-align: center;
    font-size: 1.5em;
    font-weight: 600;
    margin-bottom: 1.4rem; }
  aside h3 {
    text-align: center;
    font-weight: 300;
    font-size: 1em;
    margin-bottom: 2.8rem; }
    aside h3 a {
      color: #138a72;
      text-decoration: none; }
      aside h3 a:hover {
        color: #1ccdaa; }
  aside ul.nav {
    list-style: none; }
    aside ul.nav li.nav-itm {
      padding: 1.4rem;
      border-top: 1px solid #16A085; }
      aside ul.nav li.nav-itm:last-of-type {
        border-bottom: 1px solid #16A085; }
      aside ul.nav li.nav-itm a {
        color: #16A085;
        text-decoration: none; }

.nav-itm:hover span {
  color: #1ccdaa; }

.nav-itm:hover .icon {
  fill: #1ccdaa; }

.icon {
  height: 1.5em;
  width: 1.5em;
  fill: #16A085;
  vertical-align: bottom;
  margin-right: 1.4rem; }

.avatar-wrap {
  height: 200px;
  width: 200px;
  margin: 2.8rem auto 1.4rem auto; }

.avatar {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  fill: #111;
  padding: 1.4rem;
  background: #16A085;
  transition: fill .2s ease-in-out; }

@media (max-width: 900px) {
  aside {
    max-width: 100%;
    margin-left: 0;
    margin-right: auto;
    position: relative;
    width: 100%; }
    aside:after {
      content: " ";
      display: block;
      clear: both; }
    aside header {
      box-sizing: border-box;
      width: 33.33333%;
      float: left;
      padding-left: 0.83333%;
      padding-right: 0.83333%; }
    aside ul.nav {
      box-sizing: border-box;
      width: 66.66667%;
      float: right;
      padding-left: 0.83333%;
      padding-right: 0.83333%;
      padding-top: 2.8rem;
      padding-left: 7rem; }
      aside ul.nav li.nav-itm {
        border: none; }
        aside ul.nav li.nav-itm:last-of-type {
          border: none; } }

@media (max-width: 600px) {
  html {
    font-size: 90%; }
  aside .icon {
    display: none; }
  aside header {
    width: 100%; }
    aside header h3 {
      margin-bottom: 1.4rem; }
  aside ul.nav {
    width: 100%;
    padding-top: 0;
    padding-left: 0;
    margin-bottom: 1.4rem;
    text-align: center; }
    aside ul.nav li.nav-itm {
      display: inline-block;
      padding: 1.4rem; } }

main {
  margin-left: 350px;
  margin-top: 1.4rem;
  padding: 0 1.4rem; }
  main h2 {
    font-size: 2.250em;
    color: #111;
    margin-bottom: 1.4rem;
    letter-spacing: 1px; }

@media (max-width: 900px) {
  main {
    width: 100%;
    margin-left: 0; } }

.skills {
  list-style-type: none;
  margin-bottom: 1.4rem; }
  .skills li {
    display: inline-block;
    font-size: 1.2em;
    padding: 0.7rem 1.4rem;
    margin-right: 1.4rem;
    margin-bottom: 1.4rem;
    background-color: #111;
    color: #16A085;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24); }

.work {
  list-style-type: none; }
  .work li {
    display: list-item;
    margin-bottom: 1.4rem; }
    .work li h3 {
      font-size: 1.8rem;
      font-weight: 400;
      color: #16A085;
      display: inline-block;
      margin-right: 1.4rem; }
      .work li h3:hover {
        color: #0d5d4d; }
    .work li span {
      font-size: .8em;
      color: #444444;
      text-transform: uppercase;
      margin-right: 1.4rem; }

footer {
  margin-left: 350px;
  padding: 2.8rem 1.4rem; }
  @media (max-width: 900px) {
    footer {
      margin-left: 0; } }
  footer p {
    color: #16A085;
    font-size: 1.2rem; }
  footer a {
    color: #16A085;
    text-decoration: underline; }
    footer a:hover {
      color: #107360; }

/*# sourceMappingURL=data:application/json;base64, */
